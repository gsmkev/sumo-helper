name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

jobs:
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run linting
      run: |
        cd backend
        # Install linting tools
        pip install flake8 black mypy
        # Run flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        # Run black check
        black --check . || true
        # Run mypy
        mypy . || true

    - name: Run tests
      run: |
        cd backend
        # Install testing tools
        pip install pytest pytest-asyncio pytest-cov
        # Run tests with coverage
        pytest --cov=. --cov-report=xml --cov-report=term-missing || true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
      continue-on-error: true

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run linting
      run: |
        cd frontend
        npm run lint || true

    - name: Build application
      run: |
        cd frontend
        npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: sumo-helper-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: sumo-helper-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    runs-on: ubuntu-latest
    needs: [docker-build]

    steps:
    - uses: actions/checkout@v4

    - name: Start services
      run: |
        docker compose up -d

    - name: Wait for services to be ready
      run: |
        echo "Waiting for backend to be ready..."
        for i in {1..30}; do
          if curl -f http://localhost:8000/health >/dev/null 2>&1; then
            echo "Backend is ready!"
            break
          fi
          echo "Attempt $i: Backend not ready yet, waiting..."
          sleep 2
        done
        
        echo "Waiting for frontend to be ready..."
        for i in {1..30}; do
          if curl -f http://localhost:3000/ >/dev/null 2>&1; then
            echo "Frontend is ready!"
            break
          fi
          echo "Attempt $i: Frontend not ready yet, waiting..."
          sleep 2
        done

    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        
        # Test backend health endpoint
        echo "Testing backend health endpoint..."
        curl -f http://localhost:8000/health || echo "Backend health check failed"
        
        # Test frontend accessibility
        echo "Testing frontend accessibility..."
        curl -f http://localhost:3000/ || echo "Frontend accessibility check failed"
        
        # Test API documentation
        echo "Testing API documentation..."
        curl -f http://localhost:8000/docs || echo "API docs check failed"
        
        echo "Integration tests completed"

    - name: Show service logs
      if: always()
      run: |
        echo "=== Backend logs ==="
        docker compose logs backend || true
        echo "=== Frontend logs ==="
        docker compose logs frontend || true

    - name: Stop services
      if: always()
      run: docker compose down

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  codeql-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['python', 'javascript']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3 